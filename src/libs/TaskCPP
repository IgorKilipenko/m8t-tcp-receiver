#ifndef TaskCPP_H
#define TaskCPP_H

#include "Arduino.h"

class TaskBase {
  public:
	xTaskHandle handle;

	~TaskBase() {
#if INCLUDE_vTaskDelete
		vTaskDelete(handle);
#endif
		return;
	}
};

class Task : public TaskBase {
  public:
	Task(char const *name, void (*taskfun)(void *), unsigned portBASE_TYPE priority, unsigned portSHORT stackDepth = configMINIMAL_STACK_SIZE) {
		xTaskCreatePinnedToCore(taskfun, (signed char *)name, stackDepth, this, priority, &handle);
	}
};

class ClassTaskBase : public TaskBase {
  public:
	ClassTaskBase(char const *name, unsigned portBASE_TYPE priority, unsigned portSHORT stackDepth = configMINIMAL_STACK_SIZE) {
		xTaskCreatePinnedToCore(&runtaskstub, (signed char *)name, stackDepth, this, priority, &handle);
	}

	virtual void runtask() = 0;
	static void runtaskstub(void *parm) { (static_cast<ClassTaskBase *>(parm))->runtask(); }
};

#endif